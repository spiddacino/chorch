// <auto-generated />
using Chorch.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace Chorch.Migrations
{
    [DbContext(typeof(ChorchDbContext))]
    [Migration("20171231145439_initialCreate")]
    partial class initialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Chorch.Models.Church", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<DateTime>("FoundedDate");

                    b.Property<DateTime>("LaunchDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("StatusId");

                    b.Property<string>("Telephone1");

                    b.Property<string>("Telephone2");

                    b.Property<string>("Telephone3");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Church");
                });

            modelBuilder.Entity("Chorch.Models.ChurchBD1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ChurchSuperGroup1");
                });

            modelBuilder.Entity("Chorch.Models.ChurchBD2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ChurchSuperGroup2");
                });

            modelBuilder.Entity("Chorch.Models.ChurchStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ChurchStatus");
                });

            modelBuilder.Entity("Chorch.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Attendance");

                    b.Property<decimal>("Cost");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("ImageUrl");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("Chorch.Models.EventRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("EventRegistration");
                });

            modelBuilder.Entity("Chorch.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("GroupAgeEnd");

                    b.Property<int>("GroupAgeStart");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Chorch.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<DateTime>("FoundedDate");

                    b.Property<int?>("FounderId");

                    b.Property<string>("LogoUrl");

                    b.Property<string>("Motto");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime>("OpenDate");

                    b.Property<string>("Telephone1");

                    b.Property<string>("Telephone2");

                    b.Property<string>("Telephone3");

                    b.Property<string>("WebUrl");

                    b.HasKey("Id");

                    b.HasIndex("FounderId");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("Chorch.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("ImageUrl");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Mobile");

                    b.Property<DateTime?>("WeddingAnniversary");

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("Chorch.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Status");
                });

            modelBuilder.Entity("Chorch.Models.Visitor", b =>
                {
                    b.HasBaseType("Chorch.Models.Person");

                    b.Property<string>("TimeAvailable");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<bool>("VisitYou");

                    b.ToTable("Visitor");

                    b.HasDiscriminator().HasValue("Visitor");
                });

            modelBuilder.Entity("Chorch.Models.Gender", b =>
                {
                    b.HasBaseType("Chorch.Models.Status");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.ToTable("Gender");

                    b.HasDiscriminator().HasValue("Gender");
                });

            modelBuilder.Entity("Chorch.Models.MaritalStatus", b =>
                {
                    b.HasBaseType("Chorch.Models.Status");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("MaritalStatus_Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("MaritalStatus_Name");

                    b.ToTable("MaritalStatus");

                    b.HasDiscriminator().HasValue("MaritalStatus");
                });

            modelBuilder.Entity("Chorch.Models.OtherStatus", b =>
                {
                    b.HasBaseType("Chorch.Models.Status");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("OtherStatus_Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("OtherStatus_Name");

                    b.ToTable("OtherStatus");

                    b.HasDiscriminator().HasValue("OtherStatus");
                });

            modelBuilder.Entity("Chorch.Models.Church", b =>
                {
                    b.HasOne("Chorch.Models.ChurchStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Chorch.Models.Organization", b =>
                {
                    b.HasOne("Chorch.Models.Person", "Founder")
                        .WithMany()
                        .HasForeignKey("FounderId");
                });
#pragma warning restore 612, 618
        }
    }
}
